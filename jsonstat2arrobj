#!/usr/bin/env node

var
	argv=require("yargs")
		.version()
		.usage("Usage:\n  $0 [input filename] [output filename]\n  $0 < [input] > [output] -t")
		.example("$0 oecd.json oecd-arrobj.json", "converts JSON-stat file oecd.json into a new file (oecd-arrobj.json) containing an array of objects.")
		.example("$0 < oecd.json > oecd-arrobj.json -t", "converts JSON-stat stream oecd.json into a new stream (oecd-arrobj.json) containing an array of objects.")
		.boolean("s")
		.alias("s", "status")
		.describe("s", "Include status information")
		.boolean("c")
		.alias("c", "cid")
		.describe("c", "Identify categories by ID instead of label")
		.boolean("u")
		.alias("u", "unit")
		.describe("u", "Include unit information when available")
		.boolean("m")
		.alias("m", "meta")
		.describe("m", "Use the metadata enriched output (object of objects)")
		.alias("b", "by")
		.describe("b", "Transpose by the specified single category dimension")
		.alias("p", "prefix")
		.describe("p", "Prefix to be used when data is transposed")
		.alias("d", "drop")
		.describe("d", "Comma-separated single category dimensions to be dropped when data is transposed")
		.boolean("k")
		.alias("k", "comma")
		.describe("k", "Represent values as strings with comma as the decimal mark")
		.boolean("t")
		.alias("t", "stream")
		.describe("t", "Enable the stream interface")
		.help("h")
		.alias("h", "help")
		.argv
	,
	inout=require("./inout"),

	callback=function(contents){
		var
			drop=(typeof argv.drop==="undefined") ? [] : argv.drop.split(","),
			tbl=inout.dataset(contents).toTable({
				type: "arrobj",
				status: argv.status,
				content: argv.cid ? "id": "label",
				unit: argv.unit,
				meta: argv.meta,
				by: argv.by,
				prefix: argv.prefix,
				drop: drop,
				comma: argv.comma
			})
		;

		if(tbl===null){
			console.error("Error: The input does not containt valid JSON-stat.");
			process.exit(1);
		}

		return tbl;
	}
;

inout.main(argv, callback);
