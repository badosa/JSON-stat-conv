#!/usr/bin/env node

var
	utils=require("jsonstat-utils"),
	argv=require("yargs")
		.version()
		.usage("Usage:\n  $0 [input filename] [output filename]\n  $0 < [input] > [output] -t")
		.example("$0 oecd.json oecd.csv", "converts JSON-stat file oecd.json into a new file (oecd.csv) in the CSV format.")
		.example("$0 < oecd.json > oecd.csv -t", "converts JSON-stat stream oecd.json into a new stream (oecd.csv) in the CSV format.")
		.boolean("s")
		.alias("s", "status")
		.describe("s", "Include status information")
		.alias("n", "na")
		.describe("n", "Not available symbol (default, 'n/a')")
		.alias("c", "column")
		.describe("c", "Column separator (default, ',')")
		.alias("d", "decimal")
		.describe("d", "Decimal separator (default, '.', unless column separator is ';', then default is ',')")
		.alias("v", "vlabel")
		.describe("v", "Label of the value field (default is 'Value')")
		.alias("l", "slabel")
		.describe("l", "Label of the status field (default is 'Status')")
		.boolean("t")
		.alias("t", "stream")
		.describe("t", "Enable the stream interface")
		.help("h")
		.alias("h", "help")
		.argv
	,
	inout=require("./inout"),

	callback=function(contents){
		var
			csv=utils.toCSV(
				inout.dataset(contents),
				{
					status: argv.status,
					vlabel: argv.vlabel,
					slabel: argv.slabel,
					na: argv.na,
					delimiter: (argv.column==="\\t") ? "\t" : argv.column,
					decimal: argv.decimal
				}
			)
		;

		if(csv===null){
			console.error("Error: The input does not containt valid JSON-stat.");
			process.exit(1);
		}else{
			return csv;
		}
	}
;

inout.main(argv, callback, true);
